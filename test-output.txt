import React from "react";
import { render, screen, fireEvent, waitFor } from "@testing-library/react";
import { AuthProvider, useAuth } from "@/app/contexts/AuthContext";
import { handlers } from "../../app/utils/testing/msw-handlers";
import { server } from "../../app/utils/testing/test-utils";
import { USER_KEY, TOKEN_KEY } from "@/app/utils/auth/client";
import { http, HttpResponse } from "msw";
import { ERROR_TYPES } from "@/app/utils/errors/errorTypes";

// Mock window.localStorage
const localStorageMock = (() => {
  let store = {};
  return {
    getItem: jest.fn((key) => store[key] || null),
    setItem: jest.fn((key, value) => {
      store[key] = value.toString();
    }),
    removeItem: jest.fn((key) => {
      delete store[key];
    }),
    clear: jest.fn(() => {
      store = {};
    }),
  };
})();

Object.defineProperty(window, "localStorage", {
  value: localStorageMock,
});

// Create a test component that uses the auth context
const TestComponent = () => {
  const { 
    user, 
    isAuthenticated, 
    signIn, 
    signOut, 
    signUp, 
    error, 
    isLoading,
    handleResetPassword,
    handleResetPasswordConfirm,
  } = useAuth();

  const handleLogin = async () => {
    try {
      await signIn({ email: "test@example.com", password: "password123" });
    } catch (err) {
      // Error is captured by the context
    }
  };

  const handleRegister = async () => {
    try {
      await signUp({
        email: "new@example.com",
        password: "password123",
        displayName: "User",
      });
    } catch (err) {
      // Error is captured by the context
    }
  };

  const handleResetPasswordRequest = async () => {
    try {
      await handleResetPassword("reset@example.com");
    } catch (err) {
      // Error is captured by the context
    }
  };

  const handleConfirmPasswordReset = async () => {
    try {
      await handleResetPasswordConfirm({
        email: "reset@example.com",
        password: "newpassword123",
        token: "valid-token",
      });
    } catch (err) {
      // Error is captured by the context
    }
  };

  return (
    <div>
      <div data-testid="auth-status">
        {isAuthenticated ? "Authenticated" : "Not authenticated"}
      </div>
      <div data-testid="user-email">{user?.email || "No user"}</div>
      <div data-testid="error-message">{error?.message || "No error"}</div>
      <div data-testid="error-type">{error?.type || "No error type"}</div>
      <div data-testid="loading-status">
        {isLoading ? "Loading" : "Not loading"}
      </div>
      <button data-testid="login-button" onClick={handleLogin}>
        Login
      </button>
      <button data-testid="register-button" onClick={handleRegister}>
        Register
      </button>
      <button data-testid="logout-button" onClick={signOut}>
        Logout
      </button>
      <button data-testid="reset-password-button" onClick={handleResetPasswordRequest}>
        Reset Password
      </button>
      <button data-testid="reset-password-confirm-button" onClick={handleConfirmPasswordReset}>
        Confirm Password Reset
      </button>
    </div>
  );
};

describe("MSW Handlers", () => {
  it("defines API handlers", () => {
    expect(handlers.length).toBeGreaterThan(0);
  });
});

describe("AuthContext Provider", () => {
  beforeAll(() => {
    server.listen();
  });

  afterEach(() => {
    server.resetHan
